#!/bin/bash

set -e # Exit if the script encounters an error

# Ensure that images that are build exist within the minikube docker context
eval $(minikube docker-env)

# Build services or specific service
services=($(ls -d services/* | cut -f2 -d'/'))

for service in "${services[@]}"
do
  echo "Building image for ${dir}"

  # Define different variables containing mostly paths
  PATH="./services/$SERVICE"

  DOCKER_FILE="./services/$SERVICE/Dockerfile"
  DOCKER_IMAGE_NAME=$SERVICE

  LATEST_IMAGE_NAME=$DOCKER_IMAGE_NAME:latest
  NEW_IMAGE_NAME=$DOCKER_IMAGE_NAME:temp

  # Build docker image
  docker build $PATH -t $NEW_IMAGE_NAME -f $DOCKER_FILE

  # Get latest build ID's
  LATEST_DOCKER_ID=$(docker images --no-trunc -q ${LATEST_IMAGE_NAME})
  NEW_DOCKER_ID=$(docker inspect --format {{.Id}} ${NEW_IMAGE_NAME})

  # If they don't match it's a newer image otherwise do nothing
  if [ "$LATEST_DOCKER_ID" != "$NEW_DOCKER_ID" ]; then
    docker tag $NEW_IMAGE_NAME $docker_name:${NEW_DOCKER_ID:7:16}
    docker tag $NEW_IMAGE_NAME $docker_name:latest$TARGET_POSTFIX
    echo "        Image changed, tagged: " ${NEW_DOCKER_ID:7:16}
  else
      docker tag $NEW_IMAGE_NAME $docker_name:${NEW_DOCKER_ID:7:16}
      docker tag $NEW_IMAGE_NAME $docker_name:latest$TARGET_POSTFIX
      echo "        Nothing changed"
  fi
done